import React, { useState } from 'react'

const Library = () => {
  // Mock data cho danh m·ª•c v√† t√†i li·ªáu
  const initialCategories = [
    { 
      id: 1, 
      name: 'L·∫≠p tr√¨nh Web', 
      documents: [
        { id: 1, title: 'T·ªïng quan v·ªÅ HTML v√† CSS', description: 'Gi·ªõi thi·ªáu c∆° b·∫£n v·ªÅ HTML5 v√† CSS3', type: 'PDF', size: '2.4 MB' },
        { id: 2, title: 'JavaScript c∆° b·∫£n', description: 'C√°c kh√°i ni·ªám c∆° b·∫£n v·ªÅ JavaScript', type: 'PDF', size: '3.1 MB' },
        { id: 3, title: 'H·ªçc ReactJS t·ª´ A ƒë·∫øn Z', description: 'H∆∞·ªõng d·∫´n ƒë·∫ßy ƒë·ªß v·ªÅ ReactJS', type: 'PDF', size: '5.7 MB' },
      ]
    },
    { 
      id: 2, 
      name: 'C∆° s·ªü d·ªØ li·ªáu', 
      documents: [
        { id: 1, title: 'SQL c∆° b·∫£n', description: 'H∆∞·ªõng d·∫´n v·ªÅ ng√¥n ng·ªØ truy v·∫•n SQL', type: 'PDF', size: '4.2 MB' },
        { id: 2, title: 'MongoDB cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu', description: 'Gi·ªõi thi·ªáu v·ªÅ NoSQL v√† MongoDB', type: 'PDF', size: '3.8 MB' },
      ]
    },
    { 
      id: 3, 
      name: 'H·ªçc m√°y', 
      documents: [
        { id: 1, title: 'Nh·∫≠p m√¥n Machine Learning', description: 'C√°c kh√°i ni·ªám c∆° b·∫£n v·ªÅ h·ªçc m√°y', type: 'PDF', size: '6.3 MB' },
        { id: 2, title: 'Deep Learning v·ªõi Python', description: 'H∆∞·ªõng d·∫´n th·ª±c h√†nh Deep Learning', type: 'PDF', size: '8.1 MB' },
      ]
    }
  ]

  const [categories, setCategories] = useState(initialCategories)
  const [activeCategory, setActiveCategory] = useState(1)  // M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã danh m·ª•c ƒë·∫ßu ti√™n
  const [searchTerm, setSearchTerm] = useState('')
  const [searchResults, setSearchResults] = useState([])
  const [isSearching, setIsSearching] = useState(false)

  // X·ª≠ l√Ω t√¨m ki·∫øm
  const handleSearch = (e) => {
    e.preventDefault()
    if (!searchTerm) {
      setIsSearching(false)
      return
    }

    // T√¨m ki·∫øm trong t·∫•t c·∫£ danh m·ª•c
    const results = []
    categories.forEach(category => {
      const matchingDocs = category.documents.filter(doc => 
        doc.title.toLowerCase().includes(searchTerm.toLowerCase()) || 
        doc.description.toLowerCase().includes(searchTerm.toLowerCase())
      )
      
      matchingDocs.forEach(doc => {
        results.push({
          ...doc,
          category: category.name
        })
      })
    })

    setSearchResults(results)
    setIsSearching(true)
  }

  // T√¨m danh m·ª•c hi·ªán t·∫°i
  const currentCategory = categories.find(cat => cat.id === activeCategory)

  return (
    <div className="library-container">
      <div className="library-header">
        <h1>Kho T√†i li·ªáu</h1>
        <p>Truy c·∫≠p v√†o kho t√†i li·ªáu phong ph√∫ ƒë∆∞·ª£c ph√¢n lo·∫°i theo c√°c ch·ªß ƒë·ªÅ</p>
      </div>

      {/* T√¨m ki·∫øm */}
      <div className="card">
        <form onSubmit={handleSearch}>
          <div className="form-group search-form">
            <input
              type="text"
              className="form-control"
              placeholder="T√¨m ki·∫øm t√†i li·ªáu..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <button type="submit" className="btn btn-primary">T√¨m ki·∫øm</button>
          </div>
        </form>
      </div>

      <div className="library-content">
        {/* Danh m·ª•c b√™n tr√°i */}
        <div className="categories-sidebar">
          <h2>Danh m·ª•c</h2>
          <ul className="category-list">
            {categories.map(category => (
              <li 
                key={category.id} 
                className={activeCategory === category.id ? 'active' : ''}
                onClick={() => { setActiveCategory(category.id); setIsSearching(false); }}
              >
                {category.name}
                <span className="document-count">{category.documents.length}</span>
              </li>
            ))}
          </ul>
        </div>

        {/* Danh s√°ch t√†i li·ªáu b√™n ph·∫£i */}
        <div className="documents-section">
          {isSearching ? (
            <>
              <h2>K·∫øt qu·∫£ t√¨m ki·∫øm: {searchResults.length} t√†i li·ªáu</h2>
              
              {searchResults.length > 0 ? (
                <div className="documents-list">
                  {searchResults.map((doc) => (
                    <div className="document-card" key={`${doc.category}-${doc.id}`}>
                      <div className="document-icon">üìÑ</div>
                      <div className="document-info">
                        <h3>{doc.title}</h3>
                        <p>{doc.description}</p>
                        <div className="document-meta">
                          <span>Danh m·ª•c: {doc.category}</span>
                          <span>{doc.type} ‚Ä¢ {doc.size}</span>
                        </div>
                      </div>
                      <button className="btn btn-primary">T·∫£i xu·ªëng</button>
                    </div>
                  ))}
                </div>
              ) : (
                <p>Kh√¥ng t√¨m th·∫•y t√†i li·ªáu n√†o ph√π h·ª£p v·ªõi t·ª´ kh√≥a "{searchTerm}"</p>
              )}
            </>
          ) : currentCategory ? (
            <>
              <h2>{currentCategory.name}</h2>
              
              <div className="documents-list">
                {currentCategory.documents.map((doc) => (
                  <div className="document-card" key={doc.id}>
                    <div className="document-icon">üìÑ</div>
                    <div className="document-info">
                      <h3>{doc.title}</h3>
                      <p>{doc.description}</p>
                      <div className="document-meta">
                        <span>{doc.type} ‚Ä¢ {doc.size}</span>
                      </div>
                    </div>
                    <button className="btn btn-primary">T·∫£i xu·ªëng</button>
                  </div>
                ))}
              </div>
            </>
          ) : (
            <p>Vui l√≤ng ch·ªçn m·ªôt danh m·ª•c</p>
          )}
        </div>
      </div>
    </div>
  )
}

export default Library 